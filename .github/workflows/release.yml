name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          # - x86_64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          # - target: x86_64-pc-windows-msvc
          #   os: windows-latest
        toolchain: [stable]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Cache ~/.cargo/registry
        uses: actions/cache@v2
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache ~/.cargo/git
        uses: actions/cache@v2
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target
        uses: actions/cache@v2
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
      - name: Build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --target=${{ matrix.target }}
          use-cross: false
      - name: Create artifact for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          zip --junk-paths bayard-${{ matrix.target }}.zip \
            target/${{ matrix.target }}/release/bayard
      - name: Create artifact for OSX
        if: matrix.os == 'macos-latest'
        run: |
          zip --junk-paths bayard-${{ matrix.target }}.zip \
            target/${{ matrix.target }}/release/bayard
      # - name: Create artifact for Windows
      #   if: matrix.os == 'windows-latest'
      #   run: |
      #     powershell Compress-Archive -DestinationPath bayard-${{ matrix.target }}.zip -Path target/${{ matrix.target }}/release/bayard.exe
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-${{ matrix.target }}
          path: bayard-${{ matrix.target }}.zip

  create-release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        uses: actions/create-release@v1
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Create release_upload_url.txt
        run: |
          echo '${{ steps.create-release.outputs.upload_url }}' > release_upload_url.txt
      - name: Upload release_upload_url.txt
        uses: actions/upload-artifact@v2.3.1
        with:
          name: create-release
          path: release_upload_url.txt

  upload-release:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-apple-darwin
          # - x86_64-pc-windows-msvc
    name: Upload Release
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download release_upload_url.txt
        uses: actions/download-artifact@v1
        with:
          name: create-release
      - id: upload-url
        run: |
          echo "::set-output name=url::$(cat create-release/release_upload_url.txt)"
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: build-${{ matrix.target }}
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload-url.outputs.url }}
          asset_path: ./build-${{ matrix.target }}/bayard-${{ matrix.target }}.zip
          asset_name: bayard-${{ matrix.target }}.zip
          asset_content_type: application/zip

  publish-crates:
    name: Publish crate
    strategy:
      matrix:
        os: [ubuntu-latest]
        toolchain: [stable]
    needs: [upload-release]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
      - run: |
          BAYARD_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="bayard") | .version')
          BAYARD_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/bayard | jq -r '.versions[].num')
          if echo ${BAYARD_VERSIONS} | grep ${BAYARD_VERSION} >/dev/null; then
            echo "bayard ${BAYARD_VERSION} has already published"
          else
            pushd bayard
            cargo publish --no-verify --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi

  push-container:
    name: Push Docker container
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        toolchain: [stable]
    needs: [publish-crates]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
      - run: |
          BAYARD_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="bayard") | .version')
          echo "BAYARD_VERSION=${BAYARD_VERSION}" >> $GITHUB_ENV
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          build-args: |
            BAYARD_VERSION=${{ env.BAYARD_VERSION }}
          tags: |
            mosuka/bayard:latest
            mosuka/bayard:${{ env.BAYARD_VERSION }}
